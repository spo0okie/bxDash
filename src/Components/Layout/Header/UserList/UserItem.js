import React, { useContext, useEffect, useRef, useState } from "react";
import { observer } from "mobx-react";
import { get, values } from 'mobx';
import { StoreContext } from "Data/Stores/StoreProvider";
import './UserItem.css';
import classNames from "classnames";
import { userAbsentsStatus } from "Helpers/IntervalHelper";
import { Tooltip } from 'antd';
import { attachClosestEdge, extractClosestEdge} from '@atlaskit/pragmatic-drag-and-drop-hitbox/closest-edge';
import { draggable,	dropTargetForElements} from '@atlaskit/pragmatic-drag-and-drop/element/adapter';
import { combine } from '@atlaskit/pragmatic-drag-and-drop/combine';
import { DropIndicator } from '@atlaskit/pragmatic-drag-and-drop-react-drop-indicator/box';
import { dashUserNewPos } from "Helpers/DndHelper";
import UserAlerts from "./UserAlerts";

const PhoneItem = observer(({ user }) => (
	<>
		{user.phone}
		<span className={classNames('phoneStatus', user.phoneStatus)}></span>
	</>
));

const UserItem = observer((props)=>{
	const context = useContext(StoreContext);
	const users = context.users;
	const id = props.id;
	const index = props.index;
	const user = get(users.items,id);
	const status = userAbsentsStatus(context.items['absent'],id);
	const ref = useRef(null);
	const [closestEdge, setClosestEdge] = useState(null);

	const mouseIn = () => {
        context.users.setHover(id);
    };

    const mouseOut = () => {
        context.users.setHover(null);
    };

    const toggleUser = () => {
        if (users.selected===null) {
            users.setSelect(id);
        } else {
            users.setSelect(null);
        }
    }
	
	let title=null;
	let absentClass=null;

	if (status.days<Infinity) {
		title=status.title;
		if (status.days<=14) {
			if (!status.days) {
				absentClass='ABSENT';
			} else if (status.days<7) {
				absentClass='WEEK_ABSENT';
			} else if (status.days<14) {
				absentClass = 'TWO_WEEK_ABSENT';
			}
		}
	}

	useEffect(()=>{
		const dropData = {
			type: 'user',		//—Ç–∏–ø - —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
			element: ref.current,//—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
			item: user,			//dashItem —ç–ª–µ–º–µ–Ω—Ç (task|job|ticket|plan)
			index: index,		//–ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
			//cell: cell,			//—è—á–µ–π–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–π –∏ —Å–ø–∏—Å–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç
		};		
		return combine(
			//–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ —Ç–∞—Å–∫–∞—Ç—å
		draggable({
				element: ref.current,
				getInitialData: () => dropData,
				canDrag: () => users.selected===null && user.isDraggable(),   //–Ω–µ –≤—Å–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å
				onDragStart: () => {
					console.log('drag start');
					users.setHover(null);
					user.setDragging(true);        //–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –ø–æ—Ç–∞—â–∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç (—Å—Ç–∞—Ä–æ–µ –º–µ—Å—Ç–æ –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º)
				},
				onDragStop: () => {
					console.log('drag stop');
					user.setDragging(false);       //–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–∞—â–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
				},
				onDrop: ({source,location}) => {
					console.log('drag complete');
					console.log(source);
					console.log(location);
					//user.setDragging(false);       //–≥–æ–≤–æ—Ä–∏–º —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ç–∞—â–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç
					const edge=extractClosestEdge(location.current.dropTargets[0].data);
					users.setOrder(dashUserNewPos(
						values(users.order),
						source.data.index,
						location.current.dropTargets[0].data.index,
						edge
					));
					//dashItemsDrop(dropData.item,location);  //–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–æ—Å–æ–∫
				},
			}),
				
			//–¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –±—ã–ª–æ –±—Ä–æ—Å–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç (–≤—Å—Ç–∞–≤–∫–∞ –≤ —Å–ø–∏—Å–æ–∫)
			dropTargetForElements({
				element: ref.current,
				canDrop({ source }) {
					//–Ω–µ–ª—å–∑—è –±—Ä–æ—Å–∞—Ç—å –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞, –∏ –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è (–Ω—É –∏–ª–∏ –º–æ–∂–Ω–æ –Ω–æ –Ω–∞–¥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ç–æ –∏–Ω–∞—á–µ)
					return user.isDraggable() && source.data.type === 'user';
				},
				getData({ input,element }) {//–∫–æ–≥–¥–∞ –Ω–∞–¥ –Ω–∞–º–∏ —Ç–∞—â—è—Ç —ç–ª–µ–º–µ–Ω—Ç
					//–Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏ (input) –∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (element) –æ–Ω–æ –¥–æ–±–∞–≤–∏—Ç –∫ dropData –ø–æ–ª–µ Edge - –±–ª–∏–∂–∞–π—à—É—é –∫ —Ç–æ—á–∫–µ —Å–±—Ä–æ—Å–∞ –≥—Ä–∞–Ω—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ [top,bottom]
					//console.log(element);
					return attachClosestEdge(dropData, {
						element,
						input,
						allowedEdges: ['left','right'],
					});
				},
				onDrag({ self, source }) {
					//–µ—Å–ª–∏ –Ω–∞–¥ –Ω–∞–º–∏ —á—Ç–æ-—Ç–æ —Ç–∞—â–∞—Ç, —Ç–æ –ø–æ–¥—Å–≤–µ—Ç–∏–º –≤—Å—é —Å–≤–æ—é —è—á–µ–π–∫—É (–¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏)
					//if (source.data.setCell!==undefined) source.data.setCell(dropData.cell);
	
					//–µ—Å–ª–∏ –º—ã —Ç–∞—â–∏–º —Å–µ–±—è –Ω–∞–¥ —Å–æ–±–æ–π, —Ç–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –±–ª–∏–∂–π—à—É—é –≥—Ä–∞–Ω—å –∫–∞–∫ null –∏ –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
					if (source.element === dropData.element) {setClosestEdge(null); return;}
	
					//–∑–∞–≥—Ä—É–∂–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –≥—Ä–∞–Ω—å, –∫–æ—Ç–æ—Ä—É—é —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —á–µ—Ä–µ–∑ getData
					const closestEdge = extractClosestEdge(self.data);
	
					//–µ—Å–ª–∏ –º—ã —Ç–∞—â–∏–º —Å–µ–±—è –Ω–∞–¥ —Å–æ—Å–µ–¥–Ω–∏–º–∏ —è—á–µ–π–∫–∞–º–∏ –∏ –ø–∞–¥–∞–µ–º –≤ –∏—Ç–æ–≥–µ –Ω–∞ —Ç–æ –∂–µ –º–µ—Å—Ç–æ, —Ç–æ —Ç–æ–∂–µ –ø—Ä—è—á–µ–º –≥—Ä–∞–Ω—å –∏ –≤—ã—Ö–æ–¥–∏–º
					//if (samePlace(source,dropData.cell,dropData.index,closestEdge)) {setClosestEdge(null); return;}
	
					//–≤—ã—Å—Ç–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–π –≥—Ä–∞–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ç–æ–º –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ)
					setClosestEdge(closestEdge);
				},
				onDragLeave() {
					setClosestEdge(null);   //—É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≥—Ä–∞–Ω–∏
				},
				onDrop() {
					setClosestEdge(null);   //—É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –≥—Ä–∞–Ω–∏
				},
			}),
		)},[user,users,index,setClosestEdge,ref]);

	//if (closestEdge) console.log(closestEdge);
	return (
			<td 
				ref={ref}
				key={'userCard/'+id}
				title={title}
				style={{ width: 98/users.order.length+'%' }}
				className={classNames(
					'UserItem',
					'clickable',
					{'hovered':id===users.hovered && !users.selected},
					absentClass
				)}
				onMouseOver={mouseIn}
				onMouseOut={mouseOut}
				onClick={toggleUser}
				>
				<span className={classNames(
						'userStatus',user.activityStatus
					)}></span>
				{user.id===users.dutyTicketer&&(<Tooltip title={'–î–µ–∂—É—Ä–Ω—ã–π –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ'}>üé´</Tooltip>)}
				<Tooltip title={title}>{user.name}</Tooltip>
				{user.phone===users.dutyPhone&&(
					<>{'('}<Tooltip title={'–î–µ–∂—É—Ä–Ω—ã–π –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ'}><span className="dutyPhone"><PhoneItem  user={user}/></span></Tooltip>{')'}</>
				)}
				{user.phone!==users.dutyPhone&&(<>{'('}<PhoneItem user={user}/>{')'}</>)}
				<UserAlerts username={user.name} />
				{closestEdge && <DropIndicator edge={closestEdge} />}
			</td>
	)    
})


export default UserItem;